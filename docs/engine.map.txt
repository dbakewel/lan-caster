Help on module engine.map in engine:

NAME
    engine.map - Load and Manage Tiled Map Data.

CLASSES
    builtins.dict(builtins.object)
        Map
    
    class Map(builtins.dict)
     |  Map(tilesets, mapDir)
     |  
     |  The Map class is responsible for:
     |      1) Loading Tiled map files and cleaning the data so it an be used by the game engine.
     |      2) Provide utility functions for manipulating and searching map data.
     |  It is assumed the map class with be sub-classed to add additional functionality.
     |  
     |  Most of the data cleaning is performed on objects from Tiled object layers.
     |  Tiled layer objects are stored as Python Dictionaries.
     |  (https://www.w3schools.com/python/python_dictionaries.asp)
     |  
     |  The Map class also implements one game mechanic that is available to both
     |  the server and client:
     |  
     |  LAYER VISABILITY MECHANIC
     |      The layer visibility mechanic allows layers that were loaded from the Tiled
     |      map file to be shown or hidden. Normally the server and servermap set layer
     |      visibility and send it to the client in a step message as a bitmask. The
     |      client can then use that bitmask to match its visible layers to those
     |      on the server.
     |  
     |  Method resolution order:
     |      Map
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, tilesets, mapDir)
     |      Load map file and do data conversion.
     |      
     |      Note, all Tiled properties will be converted into an easier to access form.
     |          from: {object['properties'][{name: name1, value: value1}],[...]}
     |          to: {object['prop-name1']=value1,...}
     |      Note, duplicate property names is not supported!
     |      
     |      Args:
     |          tilesets (dict): a dict of Tileset objects.
     |          mapDir (str): path to map directory.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  addFollower(self, leaderObject, followerObject)
     |      Add leaderObject/followerObject relationship to self['follow']
     |      This also records the relative position of the objects.
     |      
     |      This information is used by setObjectLocationByAnchor() and setObjectMap()
     |      and causes the followerObject to follow the position of the leaderObject.
     |      
     |      Once a followerObject has been added it should not longer be used with
     |      setObjectLocationByAnchor() or setObjectMap(), only the leaderObject
     |      should.
     |  
     |  addObject(self, object, objectList=False)
     |      Add a Tiled object to an object list.
     |      
     |      Used to add Tiled objects (e.g. sprites) to the object list of a layer.
     |      The default objectList is self['sprites'].
     |      
     |      Args:
     |          object (dict): Tiled object
     |          objectList (dict): An objectList from a layer on this map.
     |  
     |  checkKeys(self, object, props)
     |      Check if all props are keys in object.
     |      
     |      This can be used by a method to check if an object has all the
     |      data required. If data is missing then a warning
     |      is logged that suggests where the data may be missing from.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          props (list): A list of keys. e.g. ["prop-deltaX", "anchorX"]
     |      
     |      Returns:
     |          bool: True if all props are in object else False
     |  
     |  checkLocation(self, object, newAnchorX, newAnchorY, ignoreInBounds=False)
     |      Check if a location for an object is valid.
     |      
     |      Determines if (newAnchorX, newAnchorY) would be a valid anchor point for
     |      object while taking several things into account, including map size, inBounds layer,
     |      and outOfBounds layer, collision with other sprites.
     |      
     |      Note, the priority evaluation is as follows:
     |      1) if object collides (overlaps) with another sprite then it is NOT valid.
     |         Note, two objects with collisionType == 'anchor' are allowed in the same location.
     |      2) if object does not fully collide (overlap) with the map then it is NOT valid.
     |      3) if object collides (overlaps) with an object on the outOfBounds layer then it is NOT valid.
     |      4) if the inBounds layer is empty or ignoreInBounds == True then it IS valid
     |      5) if object is fully inside an object or objects on the inBounds layer then it IS valid.
     |      6) else it is NOT valid.
     |      
     |      Args:
     |          object (dict): A Tiled object.
     |          newAnchorX (float): x coordiate to check if valid
     |          newAnchorY (float): y coordiate to check if valid
     |          ignoreInBounds (bool): if True then do not consider inBounds layers (default False)
     |      
     |      Returns:
     |          bool: True if an anchor point of (newAnchorX, newAnchorY) would be a valid for object, else False
     |  
     |  checkObject(self, object)
     |      Check that object has required keys.
     |      
     |      Ensure object meets all basic criteria that are required by the server.
     |      If an empty object ({}) is passed then it is populated with default
     |      values until it meets the minimum requirements of a Tiled object.
     |      
     |      The minimum object contains:
     |      {
     |          'name': (str)
     |          'type': (str)
     |          'x': (float)
     |          'y': (float)
     |          'width': (float)
     |          'height': (float)
     |          'anchorX': (float)
     |          'anchorY': (float)
     |          'collisionType': (str) One of 'none', 'anchor', 'rect', 'circle'
     |          'mapName': (str) The last map the object was on (or is still on).
     |      
     |          Only for tile objects have the following:
     |          'gid': (int) Map Global Tile ID.
     |          'tilesetName': (str) Tile Tileset Name.
     |          'tilesetTileNumber': (int) Tileset Tile Number.
     |      }
     |      
     |      Args:
     |          object (dict)
     |      
     |      Returns:
     |          object (dict): Object is both edited in place and also returned.
     |  
     |  convertTiledColor(self, tiledColor)
     |      Convert Tiled color HEX format to pygame format.
     |      
     |      Tiled hex colors with alpha are '#AARRGGBB' format but pygame
     |      needs '#RRGGBBAA' so flip alpha to the end.
     |  
     |  convertTiledProps(self, object)
     |      Convert Tiled properties to easy to use format.
     |      
     |      If 'properties' is in object then remove it and
     |      add prop-<name> to object for each property in
     |      'properties'.
     |      
     |      Args:
     |          object (dict): An object to evaluate.
     |  
     |  findGid(self, tilesetSearchName, tilesetTileSearchNumber)
     |      Converts a tileset specific tile number to a Gid of this map.
     |      
     |      This requires that tilesetSearchName is a tileset in this map!
     |      
     |      Args:
     |          tilesetSearchName (str): The name of a tileset.
     |          tilesetTileSearchNumber (int): A tile number from tilesetSearchName
     |      
     |      Returns:
     |          tileGid (int): A map global tile number.
     |  
     |  findObject(self, name=False, type=False, collisionType=False, collidesWith=False, overlap='partial', objectList=False, exclude=False, returnAll=False)
     |      Find a Tiled object that matches ALL criteria provided.
     |      
     |      Args:
     |          name (str): Find object with object['name'] == name
     |          type (str): Find object with object['type'] == type   
     |          collisionType(str): Find object with object['collisionType'] == collisionType
     |          collidesWith(dict): Find object which collides with object provided. See
     |              geometry.collides() for details.
     |          overlap(str): Only used if collidesWith is given. Passed to geometry.collides() 
     |          objectList (dict): a list of objects to search. default is self['sprites']
     |          exclude (dict): a Tiled object. Skip this object while searching. Normally used
     |              to ensure an object does not find itself.
     |          returnAll (bool): Return a list of all matching objects, else return only the first
     |              matching object found.
     |      
     |      Returns: (one of the following)
     |          object (dict): A single Tiled object if a matching object was found and returnAll==False.
     |          False (bool): If no object was found and returnAll==False.
     |          objects (list): A possibly empty list of matching Tiled objects if returnAll==True.
     |  
     |  findTile(self, tileGid)
     |      Converts Tiled Gid for this map to a specific tileset name and tileset tile number.
     |      
     |      Args:
     |          tileGid (int): a map global tile number.
     |      
     |      Returns:
     |          tilesetName (str): name of tileset which contians tileGid
     |          tilesetTileNumber (int): tileNumber relative to tilesetName
     |  
     |  getFollowers(self, leaderObject)
     |      Returns array of objects that follow leaderObject: [object,object,object]
     |  
     |  getLayerVisablityMask(self)
     |      LAYER VISABILITY MECHANIC: Return bit mask for the visibility of all layers in self['layers']
     |      
     |      Returns:
     |          layerVisabilityMask (int): bitmask where left most bit relates
     |              the visibility of layerIndex 0, the next bit relates to
     |              layerIndex 1, and so on.
     |  
     |  getLayerVisablitybyIndex(self, layerIndex)
     |      LAYER VISABILITY MECHANIC: Return true if layer is set to visible else return False.
     |      
     |      Args:
     |          layerIndex (int)
     |      
     |      Returns:
     |          bool
     |  
     |  getLayerVisablitybyName(self, layerName)
     |      LAYER VISABILITY MECHANIC: Return true if layer is set to visible else return False.
     |      
     |      Args:
     |          layerName (str)
     |      
     |      Returns:
     |          bool
     |  
     |  logFollow(self, m)
     |      log() a human readable version of m['follow'] (for debugging)
     |  
     |  removeFollower(self, leaderObject, followerObject)
     |      Remove leaderObject/followerObject relationship from self['follow']
     |  
     |  removeObject(self, object, objectList=False)
     |      Remove a Tiled object from an object list.
     |      
     |      Used to remove Tiled objects (e.g. sprites) from the object list of a layer.
     |      The default objectList is self['sprites'].
     |      
     |      Note, this does not alter object['mapName'] since the object could be in
     |      other objectLists on this map.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          objectList (dict): An objectList from a layer on this map.
     |  
     |  removeObjectFromAllLayers(self, object)
     |      Remove a Tiled object from all layers of this map.
     |      
     |      Used to remove Tiled objects (e.g. sprites) from the object list
     |      of all layers on this map.
     |      
     |      Note, this does not alter object['mapName'] since the object could
     |      be in the middle of being processed by a step loop that needs that
     |      data.
     |      
     |      Args:
     |          object (dict): Tiled object
     |  
     |  setLayerVisablityMask(self, layerVisabilityMask)
     |      LAYER VISABILITY MECHANIC: Set bit mask for the visibility of all layers in self['layers']
     |      
     |      Args:
     |          layerVisabilityMask (int): bitmask where left most bit relates
     |              the visibility of layerIndex 0, the next bit relates to
     |              layerIndex 1, and so on.
     |      
     |      Returns:
     |          bool: True if the layerVisabilityMask mask was different from
     |              the mask that was already set.
     |  
     |  setLayerVisablitybyIndex(self, layerIndex, visable)
     |      LAYER VISABILITY MECHANIC: Show/Hide layer by index.
     |      
     |      Args:
     |          layerIndex (str): The index of a layer in self['layers'].
     |          visable (bool): True == visible.
     |  
     |  setLayerVisablitybyName(self, layerName, visable)
     |      LAYER VISABILITY MECHANIC: Show/Hide layer by name.
     |      
     |      Args:
     |          layerName (str): The name of a layer as defined in Tiled.
     |          visable (bool): True == visible.
     |  
     |  setMapChanged(self, changed=True)
     |      flag the map has changed (True) or not changed (False).
     |      
     |      This is used to determine if the server needs to send an
     |      update to clients.
     |  
     |  setObjectLocationByAnchor(self, object, anchorX, anchorY)
     |      Set an objects location using its anchor point.
     |      
     |      Updates an object anchor point and then sets it x, y to match.
     |      Also updates the relative position of any following objects.
     |      
     |      Args:
     |          object (dict): A Tiled Object
     |          x (float)
     |          y (float)
     |  
     |  setObjectLocationByXY(self, object, x, y)
     |      Set an objects location using its top/left corner.
     |      
     |      Updates an object x,y and then sets it anchor point to match.
     |      
     |      ***Do not use without good reason. Most objects should have their
     |      location set by setObjectLocationByAnchor()***
     |      
     |      Args:
     |          object (dict): A Tiled Object
     |          x (float)
     |          y (float)
     |  
     |  setObjectMap(self, object, destMap)
     |      Move a Tiled object to a different map.
     |      
     |      Remove object from all known layers on this map and add
     |      it to the same layers on destMap. Also move any following
     |      objects to the new map.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          destMap (engine.map.Map)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if the dictionary has the specified key, else False.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(self, /)
     |      Return a reverse iterator over the dict keys.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  get(self, key, default=None, /)
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(self, /)
     |      Remove and return a (key, value) pair as a 2-tuple.
     |      
     |      Pairs are returned in LIFO (last-in, first-out) order.
     |      Raises KeyError if the dict is empty.
     |  
     |  setdefault(self, key, default=None, /)
     |      Insert key with a value of default if key is not in the dictionary.
     |      
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.dict:
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Create a new dictionary with keys from iterable and values set to value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.dict:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

