Help on module engine.tileset in engine:

NAME
    engine.tileset - Load Tiled Tileset Data.

CLASSES
    builtins.dict(builtins.object)
        Tileset
    
    class Tileset(builtins.dict)
     |  Tileset(tilesetFile)
     |  
     |  The Tileset class is responsible for loading Tiled tileset files so they can be used by the game engine.
     |  
     |  It is assumed this class will be sub-classed to add additional functionality.
     |  
     |  Tiles within a tileset are numbers from left to right and top to bottom. The top
     |  left tile is number 0, the tile to it's right is numbered 1, and so on.
     |  
     |  Method resolution order:
     |      Tileset
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, tilesetFile)
     |      Load tileset file and do data conversion.
     |      
     |      Note, all Tiled properites will be converted into an easier to access form.
     |          from: {object['properties'][{name: name1, value: value1}],[...]}
     |          to: {object['prop-name1']=value1,...}
     |      Note, duplicate property names is not supported!
     |      
     |      Args:
     |          tilesetFile (str): path and filename of tileset.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  getAnchorX(self, tileNumber)
     |      Return X anchor point of tileNumber.
     |      
     |      Search for most specific anchorX for tileNumber. Look first for
     |      "anchorX" property in the tile itself, then for "anchorX" property
     |      in the tileset. If nothing is found then assume the anchoX is in
     |      the middle of the the tile.
     |      
     |      Args:
     |          tileNumber (int)
     |      
     |      Returns:
     |          anchorX (int)
     |  
     |  getAnchorY(self, tileNumber)
     |      Return Y anchor point of tileNumber.
     |      
     |      Search for most specific anchorY for tileNumber. Look first for
     |      "anchorY" property in the tile itself, then for "anchorY" property
     |      in the tileset. If nothing is found then assume the anchoY is in
     |      the middle of the the tile.
     |      
     |      Args:
     |          tileNumber (int)
     |      
     |      Returns:
     |          anchorY (int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if the dictionary has the specified key, else False.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(self, /)
     |      Return a reverse iterator over the dict keys.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  get(self, key, default=None, /)
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(self, /)
     |      Remove and return a (key, value) pair as a 2-tuple.
     |      
     |      Pairs are returned in LIFO (last-in, first-out) order.
     |      Raises KeyError if the dict is empty.
     |  
     |  setdefault(self, key, default=None, /)
     |      Insert key with a value of default if key is not in the dictionary.
     |      
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.dict:
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Create a new dictionary with keys from iterable and values set to value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.dict:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

